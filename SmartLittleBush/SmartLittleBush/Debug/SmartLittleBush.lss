
SmartLittleBush.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ec8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00400ec8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000bc  20000434  004012fc  00020434  2**2
                  ALLOC
  3 .stack        00003000  200004f0  004013b8  00020434  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045e  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000bcb0  00000000  00000000  000204b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a4e  00000000  00000000  0002c167  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000028f2  00000000  00000000  0002dbb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005e0  00000000  00000000  000304a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000570  00000000  00000000  00030a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012673  00000000  00000000  00030ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007a1c  00000000  00000000  0004366a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00051b32  00000000  00000000  0004b086  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000db4  00000000  00000000  0009cbb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 34 00 20 a5 09 40 00 a1 09 40 00 a1 09 40 00     .4. ..@...@...@.
  400010:	a1 09 40 00 a1 09 40 00 a1 09 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a1 09 40 00 a1 09 40 00 00 00 00 00 a1 09 40 00     ..@...@.......@.
  40003c:	a1 09 40 00 a1 09 40 00 a1 09 40 00 a1 09 40 00     ..@...@...@...@.
  40004c:	a1 09 40 00 a1 09 40 00 a1 09 40 00 a1 09 40 00     ..@...@...@...@.
  40005c:	a1 09 40 00 a1 09 40 00 a1 09 40 00 00 00 00 00     ..@...@...@.....
  40006c:	29 08 40 00 3d 08 40 00 51 08 40 00 a1 09 40 00     ).@.=.@.Q.@...@.
  40007c:	a1 09 40 00 00 00 00 00 00 00 00 00 a1 09 40 00     ..@...........@.
  40008c:	a1 09 40 00 a1 09 40 00 a1 09 40 00 a1 09 40 00     ..@...@...@...@.
  40009c:	89 0c 40 00 a1 09 40 00 a1 09 40 00 a1 09 40 00     ..@...@...@...@.
  4000ac:	a1 09 40 00 a1 09 40 00 a1 09 40 00 a1 09 40 00     ..@...@...@...@.
  4000bc:	a1 09 40 00 a1 09 40 00 a1 09 40 00 a1 09 40 00     ..@...@...@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000434 	.word	0x20000434
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00400ec8 	.word	0x00400ec8

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00400ec8 	.word	0x00400ec8
  40012c:	20000438 	.word	0x20000438
  400130:	00400ec8 	.word	0x00400ec8
  400134:	00000000 	.word	0x00000000

00400138 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400138:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40013a:	0189      	lsls	r1, r1, #6
  40013c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40013e:	2402      	movs	r4, #2
  400140:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400142:	f04f 31ff 	mov.w	r1, #4294967295
  400146:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400148:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40014a:	605a      	str	r2, [r3, #4]
}
  40014c:	bc10      	pop	{r4}
  40014e:	4770      	bx	lr

00400150 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400150:	0189      	lsls	r1, r1, #6
  400152:	2305      	movs	r3, #5
  400154:	5043      	str	r3, [r0, r1]
  400156:	4770      	bx	lr

00400158 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400158:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40015c:	61ca      	str	r2, [r1, #28]
  40015e:	4770      	bx	lr

00400160 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400160:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400164:	624a      	str	r2, [r1, #36]	; 0x24
  400166:	4770      	bx	lr

00400168 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400168:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40016c:	6a08      	ldr	r0, [r1, #32]
}
  40016e:	4770      	bx	lr

00400170 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400170:	b4f0      	push	{r4, r5, r6, r7}
  400172:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400174:	2402      	movs	r4, #2
  400176:	9401      	str	r4, [sp, #4]
  400178:	2408      	movs	r4, #8
  40017a:	9402      	str	r4, [sp, #8]
  40017c:	2420      	movs	r4, #32
  40017e:	9403      	str	r4, [sp, #12]
  400180:	2480      	movs	r4, #128	; 0x80
  400182:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400184:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400186:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400188:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40018a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40018e:	d814      	bhi.n	4001ba <tc_find_mck_divisor+0x4a>
  400190:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400192:	42a0      	cmp	r0, r4
  400194:	d217      	bcs.n	4001c6 <tc_find_mck_divisor+0x56>
  400196:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400198:	af01      	add	r7, sp, #4
  40019a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40019e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4001a2:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4001a4:	4284      	cmp	r4, r0
  4001a6:	d30a      	bcc.n	4001be <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4001a8:	4286      	cmp	r6, r0
  4001aa:	d90d      	bls.n	4001c8 <tc_find_mck_divisor+0x58>
			ul_index++) {
  4001ac:	3501      	adds	r5, #1
	for (ul_index = 0;
  4001ae:	2d05      	cmp	r5, #5
  4001b0:	d1f3      	bne.n	40019a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4001b2:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4001b4:	b006      	add	sp, #24
  4001b6:	bcf0      	pop	{r4, r5, r6, r7}
  4001b8:	4770      	bx	lr
			return 0;
  4001ba:	2000      	movs	r0, #0
  4001bc:	e7fa      	b.n	4001b4 <tc_find_mck_divisor+0x44>
  4001be:	2000      	movs	r0, #0
  4001c0:	e7f8      	b.n	4001b4 <tc_find_mck_divisor+0x44>
	return 1;
  4001c2:	2001      	movs	r0, #1
  4001c4:	e7f6      	b.n	4001b4 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  4001c6:	2500      	movs	r5, #0
	if (p_uldiv) {
  4001c8:	b12a      	cbz	r2, 4001d6 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  4001ca:	a906      	add	r1, sp, #24
  4001cc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4001d0:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4001d4:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4001d6:	2b00      	cmp	r3, #0
  4001d8:	d0f3      	beq.n	4001c2 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4001da:	601d      	str	r5, [r3, #0]
	return 1;
  4001dc:	2001      	movs	r0, #1
  4001de:	e7e9      	b.n	4001b4 <tc_find_mck_divisor+0x44>

004001e0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001e0:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001e2:	480e      	ldr	r0, [pc, #56]	; (40021c <sysclk_init+0x3c>)
  4001e4:	4b0e      	ldr	r3, [pc, #56]	; (400220 <sysclk_init+0x40>)
  4001e6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001e8:	213e      	movs	r1, #62	; 0x3e
  4001ea:	2000      	movs	r0, #0
  4001ec:	4b0d      	ldr	r3, [pc, #52]	; (400224 <sysclk_init+0x44>)
  4001ee:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001f0:	4c0d      	ldr	r4, [pc, #52]	; (400228 <sysclk_init+0x48>)
  4001f2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001f4:	2800      	cmp	r0, #0
  4001f6:	d0fc      	beq.n	4001f2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001f8:	4b0c      	ldr	r3, [pc, #48]	; (40022c <sysclk_init+0x4c>)
  4001fa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001fc:	4a0c      	ldr	r2, [pc, #48]	; (400230 <sysclk_init+0x50>)
  4001fe:	4b0d      	ldr	r3, [pc, #52]	; (400234 <sysclk_init+0x54>)
  400200:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400202:	4c0d      	ldr	r4, [pc, #52]	; (400238 <sysclk_init+0x58>)
  400204:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400206:	2800      	cmp	r0, #0
  400208:	d0fc      	beq.n	400204 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40020a:	2010      	movs	r0, #16
  40020c:	4b0b      	ldr	r3, [pc, #44]	; (40023c <sysclk_init+0x5c>)
  40020e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400210:	4b0b      	ldr	r3, [pc, #44]	; (400240 <sysclk_init+0x60>)
  400212:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400214:	4801      	ldr	r0, [pc, #4]	; (40021c <sysclk_init+0x3c>)
  400216:	4b02      	ldr	r3, [pc, #8]	; (400220 <sysclk_init+0x40>)
  400218:	4798      	blx	r3
  40021a:	bd10      	pop	{r4, pc}
  40021c:	07270e00 	.word	0x07270e00
  400220:	00400b61 	.word	0x00400b61
  400224:	004008c9 	.word	0x004008c9
  400228:	0040091d 	.word	0x0040091d
  40022c:	0040092d 	.word	0x0040092d
  400230:	20133f01 	.word	0x20133f01
  400234:	400e0400 	.word	0x400e0400
  400238:	0040093d 	.word	0x0040093d
  40023c:	00400865 	.word	0x00400865
  400240:	00400a51 	.word	0x00400a51

00400244 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400244:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400246:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40024a:	4b46      	ldr	r3, [pc, #280]	; (400364 <board_init+0x120>)
  40024c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40024e:	200b      	movs	r0, #11
  400250:	4c45      	ldr	r4, [pc, #276]	; (400368 <board_init+0x124>)
  400252:	47a0      	blx	r4
  400254:	200c      	movs	r0, #12
  400256:	47a0      	blx	r4
  400258:	200d      	movs	r0, #13
  40025a:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  40025c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400260:	2013      	movs	r0, #19
  400262:	4c42      	ldr	r4, [pc, #264]	; (40036c <board_init+0x128>)
  400264:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  400266:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40026a:	2014      	movs	r0, #20
  40026c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  40026e:	4940      	ldr	r1, [pc, #256]	; (400370 <board_init+0x12c>)
  400270:	2023      	movs	r0, #35	; 0x23
  400272:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400274:	493f      	ldr	r1, [pc, #252]	; (400374 <board_init+0x130>)
  400276:	204c      	movs	r0, #76	; 0x4c
  400278:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40027a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40027e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400282:	483d      	ldr	r0, [pc, #244]	; (400378 <board_init+0x134>)
  400284:	4b3d      	ldr	r3, [pc, #244]	; (40037c <board_init+0x138>)
  400286:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
  400288:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40028c:	2000      	movs	r0, #0
  40028e:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
  400290:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400294:	2008      	movs	r0, #8
  400296:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
  400298:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40029c:	2052      	movs	r0, #82	; 0x52
  40029e:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  4002a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4002a4:	200c      	movs	r0, #12
  4002a6:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  4002a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4002ac:	200d      	movs	r0, #13
  4002ae:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  4002b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4002b4:	200e      	movs	r0, #14
  4002b6:	47a0      	blx	r4
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#  ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  4002b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4002bc:	200b      	movs	r0, #11
  4002be:	47a0      	blx	r4
#  endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  4002c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4002c4:	2015      	movs	r0, #21
  4002c6:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  4002c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4002cc:	2016      	movs	r0, #22
  4002ce:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART1_SCK_IDX, PIN_USART1_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM33312 enable pin */
	gpio_configure_pin(PIN_USART1_EN_IDX, PIN_USART1_EN_FLAGS);
  4002d0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4002d4:	2017      	movs	r0, #23
  4002d6:	47a0      	blx	r4
	gpio_set_pin_low(PIN_USART1_EN_IDX);
  4002d8:	2017      	movs	r0, #23
  4002da:	4b29      	ldr	r3, [pc, #164]	; (400380 <board_init+0x13c>)
  4002dc:	4798      	blx	r3
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#if defined(CONF_BOARD_ILI9325) || defined(CONF_BOARD_ILI93XX)
	/* Configure LCD EBI pins */
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  4002de:	4d29      	ldr	r5, [pc, #164]	; (400384 <board_init+0x140>)
  4002e0:	4629      	mov	r1, r5
  4002e2:	2040      	movs	r0, #64	; 0x40
  4002e4:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  4002e6:	4629      	mov	r1, r5
  4002e8:	2041      	movs	r0, #65	; 0x41
  4002ea:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  4002ec:	4629      	mov	r1, r5
  4002ee:	2042      	movs	r0, #66	; 0x42
  4002f0:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  4002f2:	4629      	mov	r1, r5
  4002f4:	2043      	movs	r0, #67	; 0x43
  4002f6:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  4002f8:	4629      	mov	r1, r5
  4002fa:	2044      	movs	r0, #68	; 0x44
  4002fc:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  4002fe:	4629      	mov	r1, r5
  400300:	2045      	movs	r0, #69	; 0x45
  400302:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  400304:	4629      	mov	r1, r5
  400306:	2046      	movs	r0, #70	; 0x46
  400308:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  40030a:	4629      	mov	r1, r5
  40030c:	2047      	movs	r0, #71	; 0x47
  40030e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  400310:	4629      	mov	r1, r5
  400312:	204b      	movs	r0, #75	; 0x4b
  400314:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  400316:	4629      	mov	r1, r5
  400318:	2048      	movs	r0, #72	; 0x48
  40031a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS1, PIN_EBI_NCS1_FLAGS);
  40031c:	4629      	mov	r1, r5
  40031e:	204f      	movs	r0, #79	; 0x4f
  400320:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  400322:	4629      	mov	r1, r5
  400324:	2053      	movs	r0, #83	; 0x53
  400326:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3155
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  400328:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40032c:	204d      	movs	r0, #77	; 0x4d
  40032e:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_ADS7843
	/* Configure Touchscreen SPI pins */
	gpio_configure_pin(BOARD_ADS7843_IRQ_GPIO,BOARD_ADS7843_IRQ_FLAGS);
  400330:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  400334:	4629      	mov	r1, r5
  400336:	2010      	movs	r0, #16
  400338:	47a0      	blx	r4
	gpio_configure_pin(BOARD_ADS7843_BUSY_GPIO, BOARD_ADS7843_BUSY_FLAGS);
  40033a:	4629      	mov	r1, r5
  40033c:	2011      	movs	r0, #17
  40033e:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400340:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400344:	200c      	movs	r0, #12
  400346:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400348:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40034c:	200d      	movs	r0, #13
  40034e:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400350:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400354:	200e      	movs	r0, #14
  400356:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  400358:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40035c:	200b      	movs	r0, #11
  40035e:	47a0      	blx	r4
  400360:	bd38      	pop	{r3, r4, r5, pc}
  400362:	bf00      	nop
  400364:	400e1450 	.word	0x400e1450
  400368:	0040094d 	.word	0x0040094d
  40036c:	00400559 	.word	0x00400559
  400370:	28000079 	.word	0x28000079
  400374:	28000059 	.word	0x28000059
  400378:	400e0e00 	.word	0x400e0e00
  40037c:	00400679 	.word	0x00400679
  400380:	0040053d 	.word	0x0040053d
  400384:	08000001 	.word	0x08000001

00400388 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
  400388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40038c:	4606      	mov	r6, r0
  40038e:	2400      	movs	r4, #0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
  400390:	4d09      	ldr	r5, [pc, #36]	; (4003b8 <LED_Off+0x30>)
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_low(led_gpio);
			} else {
				gpio_set_pin_high(led_gpio);
  400392:	4f0a      	ldr	r7, [pc, #40]	; (4003bc <LED_Off+0x34>)
				gpio_set_pin_low(led_gpio);
  400394:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4003c0 <LED_Off+0x38>
  400398:	e003      	b.n	4003a2 <LED_Off+0x1a>
  40039a:	47c0      	blx	r8
  40039c:	3408      	adds	r4, #8
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
  40039e:	2c18      	cmp	r4, #24
  4003a0:	d008      	beq.n	4003b4 <LED_Off+0x2c>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
  4003a2:	5960      	ldr	r0, [r4, r5]
  4003a4:	42b0      	cmp	r0, r6
  4003a6:	d1f9      	bne.n	40039c <LED_Off+0x14>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
  4003a8:	192b      	adds	r3, r5, r4
  4003aa:	685b      	ldr	r3, [r3, #4]
  4003ac:	2b01      	cmp	r3, #1
  4003ae:	d0f4      	beq.n	40039a <LED_Off+0x12>
				gpio_set_pin_high(led_gpio);
  4003b0:	47b8      	blx	r7
  4003b2:	e7f3      	b.n	40039c <LED_Off+0x14>
			}
		}
	}
}
  4003b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4003b8:	00400e88 	.word	0x00400e88
  4003bc:	00400523 	.word	0x00400523
  4003c0:	0040053d 	.word	0x0040053d

004003c4 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
  4003c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4003c8:	4606      	mov	r6, r0
  4003ca:	2400      	movs	r4, #0
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
  4003cc:	4d09      	ldr	r5, [pc, #36]	; (4003f4 <LED_On+0x30>)
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
				gpio_set_pin_high(led_gpio);
			} else {
				gpio_set_pin_low(led_gpio);
  4003ce:	4f0a      	ldr	r7, [pc, #40]	; (4003f8 <LED_On+0x34>)
				gpio_set_pin_high(led_gpio);
  4003d0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4003fc <LED_On+0x38>
  4003d4:	e003      	b.n	4003de <LED_On+0x1a>
  4003d6:	47c0      	blx	r8
  4003d8:	3408      	adds	r4, #8
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
  4003da:	2c18      	cmp	r4, #24
  4003dc:	d008      	beq.n	4003f0 <LED_On+0x2c>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
  4003de:	5960      	ldr	r0, [r4, r5]
  4003e0:	42b0      	cmp	r0, r6
  4003e2:	d1f9      	bne.n	4003d8 <LED_On+0x14>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
  4003e4:	192b      	adds	r3, r5, r4
  4003e6:	685b      	ldr	r3, [r3, #4]
  4003e8:	2b01      	cmp	r3, #1
  4003ea:	d0f4      	beq.n	4003d6 <LED_On+0x12>
				gpio_set_pin_low(led_gpio);
  4003ec:	47b8      	blx	r7
  4003ee:	e7f3      	b.n	4003d8 <LED_On+0x14>
			}
		}
	}
}
  4003f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4003f4:	00400e88 	.word	0x00400e88
  4003f8:	0040053d 	.word	0x0040053d
  4003fc:	00400523 	.word	0x00400523

00400400 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400400:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400402:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400406:	d039      	beq.n	40047c <pio_set_peripheral+0x7c>
  400408:	d813      	bhi.n	400432 <pio_set_peripheral+0x32>
  40040a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40040e:	d025      	beq.n	40045c <pio_set_peripheral+0x5c>
  400410:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400414:	d10a      	bne.n	40042c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400416:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400418:	4313      	orrs	r3, r2
  40041a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40041c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40041e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400420:	400b      	ands	r3, r1
  400422:	ea23 0302 	bic.w	r3, r3, r2
  400426:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400428:	6042      	str	r2, [r0, #4]
  40042a:	4770      	bx	lr
	switch (ul_type) {
  40042c:	2900      	cmp	r1, #0
  40042e:	d1fb      	bne.n	400428 <pio_set_peripheral+0x28>
  400430:	4770      	bx	lr
  400432:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400436:	d020      	beq.n	40047a <pio_set_peripheral+0x7a>
  400438:	d809      	bhi.n	40044e <pio_set_peripheral+0x4e>
  40043a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40043e:	d1f3      	bne.n	400428 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400440:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400442:	4313      	orrs	r3, r2
  400444:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400446:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400448:	4313      	orrs	r3, r2
  40044a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40044c:	e7ec      	b.n	400428 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40044e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400452:	d012      	beq.n	40047a <pio_set_peripheral+0x7a>
  400454:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400458:	d00f      	beq.n	40047a <pio_set_peripheral+0x7a>
  40045a:	e7e5      	b.n	400428 <pio_set_peripheral+0x28>
{
  40045c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40045e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400460:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400462:	43d3      	mvns	r3, r2
  400464:	4021      	ands	r1, r4
  400466:	461c      	mov	r4, r3
  400468:	4019      	ands	r1, r3
  40046a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40046c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40046e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400470:	400b      	ands	r3, r1
  400472:	4023      	ands	r3, r4
  400474:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400476:	6042      	str	r2, [r0, #4]
}
  400478:	bc10      	pop	{r4}
  40047a:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40047c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40047e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400480:	400b      	ands	r3, r1
  400482:	ea23 0302 	bic.w	r3, r3, r2
  400486:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400488:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40048a:	4313      	orrs	r3, r2
  40048c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40048e:	e7cb      	b.n	400428 <pio_set_peripheral+0x28>

00400490 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400490:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400492:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400496:	bf14      	ite	ne
  400498:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40049a:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40049c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4004a0:	bf14      	ite	ne
  4004a2:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  4004a4:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  4004a6:	f012 0f02 	tst.w	r2, #2
  4004aa:	d107      	bne.n	4004bc <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4004ac:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4004b0:	bf18      	it	ne
  4004b2:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  4004b6:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4004b8:	6001      	str	r1, [r0, #0]
  4004ba:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  4004bc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4004c0:	e7f9      	b.n	4004b6 <pio_set_input+0x26>

004004c2 <pio_set_output>:
{
  4004c2:	b410      	push	{r4}
  4004c4:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4004c6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4004c8:	b944      	cbnz	r4, 4004dc <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  4004ca:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4004cc:	b143      	cbz	r3, 4004e0 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  4004ce:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4004d0:	b942      	cbnz	r2, 4004e4 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  4004d2:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4004d4:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4004d6:	6001      	str	r1, [r0, #0]
}
  4004d8:	bc10      	pop	{r4}
  4004da:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4004dc:	6641      	str	r1, [r0, #100]	; 0x64
  4004de:	e7f5      	b.n	4004cc <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4004e0:	6541      	str	r1, [r0, #84]	; 0x54
  4004e2:	e7f5      	b.n	4004d0 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4004e4:	6301      	str	r1, [r0, #48]	; 0x30
  4004e6:	e7f5      	b.n	4004d4 <pio_set_output+0x12>

004004e8 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4004e8:	f012 0f10 	tst.w	r2, #16
  4004ec:	d010      	beq.n	400510 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
  4004ee:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4004f2:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
  4004f6:	bf14      	ite	ne
  4004f8:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
  4004fc:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
  400500:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
  400504:	bf14      	ite	ne
  400506:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
  40050a:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  40050e:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400510:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400514:	4770      	bx	lr

00400516 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400516:	6401      	str	r1, [r0, #64]	; 0x40
  400518:	4770      	bx	lr

0040051a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40051a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40051c:	4770      	bx	lr

0040051e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40051e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400520:	4770      	bx	lr

00400522 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400522:	0943      	lsrs	r3, r0, #5
  400524:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400528:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40052c:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40052e:	f000 001f 	and.w	r0, r0, #31
  400532:	2201      	movs	r2, #1
  400534:	fa02 f000 	lsl.w	r0, r2, r0
  400538:	6318      	str	r0, [r3, #48]	; 0x30
  40053a:	4770      	bx	lr

0040053c <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40053c:	0943      	lsrs	r3, r0, #5
  40053e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400542:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400546:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  400548:	f000 001f 	and.w	r0, r0, #31
  40054c:	2201      	movs	r2, #1
  40054e:	fa02 f000 	lsl.w	r0, r2, r0
  400552:	6358      	str	r0, [r3, #52]	; 0x34
  400554:	4770      	bx	lr
	...

00400558 <pio_configure_pin>:
{
  400558:	b570      	push	{r4, r5, r6, lr}
  40055a:	b082      	sub	sp, #8
  40055c:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40055e:	0943      	lsrs	r3, r0, #5
  400560:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400564:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400568:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  40056a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40056e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400572:	d053      	beq.n	40061c <pio_configure_pin+0xc4>
  400574:	d80a      	bhi.n	40058c <pio_configure_pin+0x34>
  400576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40057a:	d02d      	beq.n	4005d8 <pio_configure_pin+0x80>
  40057c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400580:	d03b      	beq.n	4005fa <pio_configure_pin+0xa2>
  400582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400586:	d015      	beq.n	4005b4 <pio_configure_pin+0x5c>
		return 0;
  400588:	2000      	movs	r0, #0
  40058a:	e023      	b.n	4005d4 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  40058c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400590:	d055      	beq.n	40063e <pio_configure_pin+0xe6>
  400592:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400596:	d052      	beq.n	40063e <pio_configure_pin+0xe6>
  400598:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40059c:	d1f4      	bne.n	400588 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40059e:	f000 011f 	and.w	r1, r0, #31
  4005a2:	2601      	movs	r6, #1
  4005a4:	462a      	mov	r2, r5
  4005a6:	fa06 f101 	lsl.w	r1, r6, r1
  4005aa:	4620      	mov	r0, r4
  4005ac:	4b2f      	ldr	r3, [pc, #188]	; (40066c <pio_configure_pin+0x114>)
  4005ae:	4798      	blx	r3
	return 1;
  4005b0:	4630      	mov	r0, r6
		break;
  4005b2:	e00f      	b.n	4005d4 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4005b4:	f000 001f 	and.w	r0, r0, #31
  4005b8:	2601      	movs	r6, #1
  4005ba:	4086      	lsls	r6, r0
  4005bc:	4632      	mov	r2, r6
  4005be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005c2:	4620      	mov	r0, r4
  4005c4:	4b2a      	ldr	r3, [pc, #168]	; (400670 <pio_configure_pin+0x118>)
  4005c6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4005c8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4005cc:	bf14      	ite	ne
  4005ce:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4005d0:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4005d2:	2001      	movs	r0, #1
}
  4005d4:	b002      	add	sp, #8
  4005d6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4005d8:	f000 001f 	and.w	r0, r0, #31
  4005dc:	2601      	movs	r6, #1
  4005de:	4086      	lsls	r6, r0
  4005e0:	4632      	mov	r2, r6
  4005e2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005e6:	4620      	mov	r0, r4
  4005e8:	4b21      	ldr	r3, [pc, #132]	; (400670 <pio_configure_pin+0x118>)
  4005ea:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4005ec:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4005f0:	bf14      	ite	ne
  4005f2:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4005f4:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4005f6:	2001      	movs	r0, #1
  4005f8:	e7ec      	b.n	4005d4 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4005fa:	f000 001f 	and.w	r0, r0, #31
  4005fe:	2601      	movs	r6, #1
  400600:	4086      	lsls	r6, r0
  400602:	4632      	mov	r2, r6
  400604:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400608:	4620      	mov	r0, r4
  40060a:	4b19      	ldr	r3, [pc, #100]	; (400670 <pio_configure_pin+0x118>)
  40060c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40060e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400612:	bf14      	ite	ne
  400614:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400616:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400618:	2001      	movs	r0, #1
  40061a:	e7db      	b.n	4005d4 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40061c:	f000 001f 	and.w	r0, r0, #31
  400620:	2601      	movs	r6, #1
  400622:	4086      	lsls	r6, r0
  400624:	4632      	mov	r2, r6
  400626:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40062a:	4620      	mov	r0, r4
  40062c:	4b10      	ldr	r3, [pc, #64]	; (400670 <pio_configure_pin+0x118>)
  40062e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400630:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400634:	bf14      	ite	ne
  400636:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400638:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40063a:	2001      	movs	r0, #1
  40063c:	e7ca      	b.n	4005d4 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40063e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400642:	f000 011f 	and.w	r1, r0, #31
  400646:	2601      	movs	r6, #1
  400648:	ea05 0306 	and.w	r3, r5, r6
  40064c:	9300      	str	r3, [sp, #0]
  40064e:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400652:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400656:	bf14      	ite	ne
  400658:	2200      	movne	r2, #0
  40065a:	2201      	moveq	r2, #1
  40065c:	fa06 f101 	lsl.w	r1, r6, r1
  400660:	4620      	mov	r0, r4
  400662:	4c04      	ldr	r4, [pc, #16]	; (400674 <pio_configure_pin+0x11c>)
  400664:	47a0      	blx	r4
	return 1;
  400666:	4630      	mov	r0, r6
		break;
  400668:	e7b4      	b.n	4005d4 <pio_configure_pin+0x7c>
  40066a:	bf00      	nop
  40066c:	00400491 	.word	0x00400491
  400670:	00400401 	.word	0x00400401
  400674:	004004c3 	.word	0x004004c3

00400678 <pio_configure_pin_group>:
{
  400678:	b570      	push	{r4, r5, r6, lr}
  40067a:	b082      	sub	sp, #8
  40067c:	4605      	mov	r5, r0
  40067e:	460e      	mov	r6, r1
  400680:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  400682:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40068a:	d03d      	beq.n	400708 <pio_configure_pin_group+0x90>
  40068c:	d80a      	bhi.n	4006a4 <pio_configure_pin_group+0x2c>
  40068e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400692:	d021      	beq.n	4006d8 <pio_configure_pin_group+0x60>
  400694:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400698:	d02a      	beq.n	4006f0 <pio_configure_pin_group+0x78>
  40069a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40069e:	d00e      	beq.n	4006be <pio_configure_pin_group+0x46>
		return 0;
  4006a0:	2000      	movs	r0, #0
  4006a2:	e017      	b.n	4006d4 <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  4006a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4006a8:	d03a      	beq.n	400720 <pio_configure_pin_group+0xa8>
  4006aa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4006ae:	d037      	beq.n	400720 <pio_configure_pin_group+0xa8>
  4006b0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4006b4:	d1f4      	bne.n	4006a0 <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  4006b6:	4b23      	ldr	r3, [pc, #140]	; (400744 <pio_configure_pin_group+0xcc>)
  4006b8:	4798      	blx	r3
	return 1;
  4006ba:	2001      	movs	r0, #1
		break;
  4006bc:	e00a      	b.n	4006d4 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  4006be:	460a      	mov	r2, r1
  4006c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4006c4:	4b20      	ldr	r3, [pc, #128]	; (400748 <pio_configure_pin_group+0xd0>)
  4006c6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4006c8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4006cc:	bf14      	ite	ne
  4006ce:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4006d0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4006d2:	2001      	movs	r0, #1
}
  4006d4:	b002      	add	sp, #8
  4006d6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4006d8:	460a      	mov	r2, r1
  4006da:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4006de:	4b1a      	ldr	r3, [pc, #104]	; (400748 <pio_configure_pin_group+0xd0>)
  4006e0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4006e2:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4006e6:	bf14      	ite	ne
  4006e8:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4006ea:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  4006ec:	2001      	movs	r0, #1
  4006ee:	e7f1      	b.n	4006d4 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4006f0:	460a      	mov	r2, r1
  4006f2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4006f6:	4b14      	ldr	r3, [pc, #80]	; (400748 <pio_configure_pin_group+0xd0>)
  4006f8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4006fa:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4006fe:	bf14      	ite	ne
  400700:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400702:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400704:	2001      	movs	r0, #1
  400706:	e7e5      	b.n	4006d4 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400708:	460a      	mov	r2, r1
  40070a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40070e:	4b0e      	ldr	r3, [pc, #56]	; (400748 <pio_configure_pin_group+0xd0>)
  400710:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400712:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400716:	bf14      	ite	ne
  400718:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40071a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40071c:	2001      	movs	r0, #1
  40071e:	e7d9      	b.n	4006d4 <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400720:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  400724:	f004 0301 	and.w	r3, r4, #1
  400728:	9300      	str	r3, [sp, #0]
  40072a:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40072e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400732:	bf14      	ite	ne
  400734:	2200      	movne	r2, #0
  400736:	2201      	moveq	r2, #1
  400738:	4631      	mov	r1, r6
  40073a:	4628      	mov	r0, r5
  40073c:	4c03      	ldr	r4, [pc, #12]	; (40074c <pio_configure_pin_group+0xd4>)
  40073e:	47a0      	blx	r4
	return 1;
  400740:	2001      	movs	r0, #1
		break;
  400742:	e7c7      	b.n	4006d4 <pio_configure_pin_group+0x5c>
  400744:	00400491 	.word	0x00400491
  400748:	00400401 	.word	0x00400401
  40074c:	004004c3 	.word	0x004004c3

00400750 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400754:	4681      	mov	r9, r0
  400756:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400758:	4b12      	ldr	r3, [pc, #72]	; (4007a4 <pio_handler_process+0x54>)
  40075a:	4798      	blx	r3
  40075c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40075e:	4648      	mov	r0, r9
  400760:	4b11      	ldr	r3, [pc, #68]	; (4007a8 <pio_handler_process+0x58>)
  400762:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400764:	4005      	ands	r5, r0
  400766:	d013      	beq.n	400790 <pio_handler_process+0x40>
  400768:	4c10      	ldr	r4, [pc, #64]	; (4007ac <pio_handler_process+0x5c>)
  40076a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40076e:	e003      	b.n	400778 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400770:	42b4      	cmp	r4, r6
  400772:	d00d      	beq.n	400790 <pio_handler_process+0x40>
  400774:	3410      	adds	r4, #16
		while (status != 0) {
  400776:	b15d      	cbz	r5, 400790 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400778:	6820      	ldr	r0, [r4, #0]
  40077a:	42b8      	cmp	r0, r7
  40077c:	d1f8      	bne.n	400770 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40077e:	6861      	ldr	r1, [r4, #4]
  400780:	4229      	tst	r1, r5
  400782:	d0f5      	beq.n	400770 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400784:	68e3      	ldr	r3, [r4, #12]
  400786:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400788:	6863      	ldr	r3, [r4, #4]
  40078a:	ea25 0503 	bic.w	r5, r5, r3
  40078e:	e7ef      	b.n	400770 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400790:	4b07      	ldr	r3, [pc, #28]	; (4007b0 <pio_handler_process+0x60>)
  400792:	681b      	ldr	r3, [r3, #0]
  400794:	b123      	cbz	r3, 4007a0 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400796:	4b07      	ldr	r3, [pc, #28]	; (4007b4 <pio_handler_process+0x64>)
  400798:	681b      	ldr	r3, [r3, #0]
  40079a:	b10b      	cbz	r3, 4007a0 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  40079c:	4648      	mov	r0, r9
  40079e:	4798      	blx	r3
  4007a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4007a4:	0040051b 	.word	0x0040051b
  4007a8:	0040051f 	.word	0x0040051f
  4007ac:	20000450 	.word	0x20000450
  4007b0:	200004c8 	.word	0x200004c8
  4007b4:	200004c4 	.word	0x200004c4

004007b8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4007b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4007ba:	4c18      	ldr	r4, [pc, #96]	; (40081c <pio_handler_set+0x64>)
  4007bc:	6826      	ldr	r6, [r4, #0]
  4007be:	2e06      	cmp	r6, #6
  4007c0:	d829      	bhi.n	400816 <pio_handler_set+0x5e>
  4007c2:	f04f 0c00 	mov.w	ip, #0
  4007c6:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4007c8:	4f15      	ldr	r7, [pc, #84]	; (400820 <pio_handler_set+0x68>)
  4007ca:	e004      	b.n	4007d6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4007cc:	3401      	adds	r4, #1
  4007ce:	b2e4      	uxtb	r4, r4
  4007d0:	46a4      	mov	ip, r4
  4007d2:	42a6      	cmp	r6, r4
  4007d4:	d309      	bcc.n	4007ea <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4007d6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4007d8:	0125      	lsls	r5, r4, #4
  4007da:	597d      	ldr	r5, [r7, r5]
  4007dc:	428d      	cmp	r5, r1
  4007de:	d1f5      	bne.n	4007cc <pio_handler_set+0x14>
  4007e0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4007e4:	686d      	ldr	r5, [r5, #4]
  4007e6:	4295      	cmp	r5, r2
  4007e8:	d1f0      	bne.n	4007cc <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4007ea:	4d0d      	ldr	r5, [pc, #52]	; (400820 <pio_handler_set+0x68>)
  4007ec:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4007f0:	eb05 040e 	add.w	r4, r5, lr
  4007f4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4007f8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4007fa:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4007fc:	9906      	ldr	r1, [sp, #24]
  4007fe:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400800:	3601      	adds	r6, #1
  400802:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  400804:	bf04      	itt	eq
  400806:	4905      	ldreq	r1, [pc, #20]	; (40081c <pio_handler_set+0x64>)
  400808:	600e      	streq	r6, [r1, #0]
  40080a:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40080c:	461a      	mov	r2, r3
  40080e:	4b05      	ldr	r3, [pc, #20]	; (400824 <pio_handler_set+0x6c>)
  400810:	4798      	blx	r3

	return 0;
  400812:	2000      	movs	r0, #0
  400814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  400816:	2001      	movs	r0, #1
}
  400818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40081a:	bf00      	nop
  40081c:	200004c0 	.word	0x200004c0
  400820:	20000450 	.word	0x20000450
  400824:	004004e9 	.word	0x004004e9

00400828 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400828:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40082a:	210b      	movs	r1, #11
  40082c:	4801      	ldr	r0, [pc, #4]	; (400834 <PIOA_Handler+0xc>)
  40082e:	4b02      	ldr	r3, [pc, #8]	; (400838 <PIOA_Handler+0x10>)
  400830:	4798      	blx	r3
  400832:	bd08      	pop	{r3, pc}
  400834:	400e0e00 	.word	0x400e0e00
  400838:	00400751 	.word	0x00400751

0040083c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40083c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40083e:	210c      	movs	r1, #12
  400840:	4801      	ldr	r0, [pc, #4]	; (400848 <PIOB_Handler+0xc>)
  400842:	4b02      	ldr	r3, [pc, #8]	; (40084c <PIOB_Handler+0x10>)
  400844:	4798      	blx	r3
  400846:	bd08      	pop	{r3, pc}
  400848:	400e1000 	.word	0x400e1000
  40084c:	00400751 	.word	0x00400751

00400850 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400850:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400852:	210d      	movs	r1, #13
  400854:	4801      	ldr	r0, [pc, #4]	; (40085c <PIOC_Handler+0xc>)
  400856:	4b02      	ldr	r3, [pc, #8]	; (400860 <PIOC_Handler+0x10>)
  400858:	4798      	blx	r3
  40085a:	bd08      	pop	{r3, pc}
  40085c:	400e1200 	.word	0x400e1200
  400860:	00400751 	.word	0x00400751

00400864 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400864:	4a17      	ldr	r2, [pc, #92]	; (4008c4 <pmc_switch_mck_to_pllack+0x60>)
  400866:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40086c:	4318      	orrs	r0, r3
  40086e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400870:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400872:	f013 0f08 	tst.w	r3, #8
  400876:	d10a      	bne.n	40088e <pmc_switch_mck_to_pllack+0x2a>
  400878:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40087c:	4911      	ldr	r1, [pc, #68]	; (4008c4 <pmc_switch_mck_to_pllack+0x60>)
  40087e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400880:	f012 0f08 	tst.w	r2, #8
  400884:	d103      	bne.n	40088e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400886:	3b01      	subs	r3, #1
  400888:	d1f9      	bne.n	40087e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40088a:	2001      	movs	r0, #1
  40088c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40088e:	4a0d      	ldr	r2, [pc, #52]	; (4008c4 <pmc_switch_mck_to_pllack+0x60>)
  400890:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400892:	f023 0303 	bic.w	r3, r3, #3
  400896:	f043 0302 	orr.w	r3, r3, #2
  40089a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40089c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40089e:	f013 0f08 	tst.w	r3, #8
  4008a2:	d10a      	bne.n	4008ba <pmc_switch_mck_to_pllack+0x56>
  4008a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4008a8:	4906      	ldr	r1, [pc, #24]	; (4008c4 <pmc_switch_mck_to_pllack+0x60>)
  4008aa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4008ac:	f012 0f08 	tst.w	r2, #8
  4008b0:	d105      	bne.n	4008be <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4008b2:	3b01      	subs	r3, #1
  4008b4:	d1f9      	bne.n	4008aa <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4008b6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4008b8:	4770      	bx	lr
	return 0;
  4008ba:	2000      	movs	r0, #0
  4008bc:	4770      	bx	lr
  4008be:	2000      	movs	r0, #0
  4008c0:	4770      	bx	lr
  4008c2:	bf00      	nop
  4008c4:	400e0400 	.word	0x400e0400

004008c8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4008c8:	b9c8      	cbnz	r0, 4008fe <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008ca:	4a11      	ldr	r2, [pc, #68]	; (400910 <pmc_switch_mainck_to_xtal+0x48>)
  4008cc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4008ce:	0209      	lsls	r1, r1, #8
  4008d0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4008d2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4008d6:	f023 0303 	bic.w	r3, r3, #3
  4008da:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4008de:	f043 0301 	orr.w	r3, r3, #1
  4008e2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008e4:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4008e6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008e8:	f013 0f01 	tst.w	r3, #1
  4008ec:	d0fb      	beq.n	4008e6 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4008ee:	4a08      	ldr	r2, [pc, #32]	; (400910 <pmc_switch_mainck_to_xtal+0x48>)
  4008f0:	6a13      	ldr	r3, [r2, #32]
  4008f2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4008f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4008fa:	6213      	str	r3, [r2, #32]
  4008fc:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008fe:	4904      	ldr	r1, [pc, #16]	; (400910 <pmc_switch_mainck_to_xtal+0x48>)
  400900:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400902:	4a04      	ldr	r2, [pc, #16]	; (400914 <pmc_switch_mainck_to_xtal+0x4c>)
  400904:	401a      	ands	r2, r3
  400906:	4b04      	ldr	r3, [pc, #16]	; (400918 <pmc_switch_mainck_to_xtal+0x50>)
  400908:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40090a:	620b      	str	r3, [r1, #32]
  40090c:	4770      	bx	lr
  40090e:	bf00      	nop
  400910:	400e0400 	.word	0x400e0400
  400914:	fec8fffc 	.word	0xfec8fffc
  400918:	01370002 	.word	0x01370002

0040091c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40091c:	4b02      	ldr	r3, [pc, #8]	; (400928 <pmc_osc_is_ready_mainck+0xc>)
  40091e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400920:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400924:	4770      	bx	lr
  400926:	bf00      	nop
  400928:	400e0400 	.word	0x400e0400

0040092c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40092c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400930:	4b01      	ldr	r3, [pc, #4]	; (400938 <pmc_disable_pllack+0xc>)
  400932:	629a      	str	r2, [r3, #40]	; 0x28
  400934:	4770      	bx	lr
  400936:	bf00      	nop
  400938:	400e0400 	.word	0x400e0400

0040093c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40093c:	4b02      	ldr	r3, [pc, #8]	; (400948 <pmc_is_locked_pllack+0xc>)
  40093e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400940:	f000 0002 	and.w	r0, r0, #2
  400944:	4770      	bx	lr
  400946:	bf00      	nop
  400948:	400e0400 	.word	0x400e0400

0040094c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40094c:	2822      	cmp	r0, #34	; 0x22
  40094e:	d81e      	bhi.n	40098e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400950:	281f      	cmp	r0, #31
  400952:	d80c      	bhi.n	40096e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400954:	4b11      	ldr	r3, [pc, #68]	; (40099c <pmc_enable_periph_clk+0x50>)
  400956:	699a      	ldr	r2, [r3, #24]
  400958:	2301      	movs	r3, #1
  40095a:	4083      	lsls	r3, r0
  40095c:	4393      	bics	r3, r2
  40095e:	d018      	beq.n	400992 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400960:	2301      	movs	r3, #1
  400962:	fa03 f000 	lsl.w	r0, r3, r0
  400966:	4b0d      	ldr	r3, [pc, #52]	; (40099c <pmc_enable_periph_clk+0x50>)
  400968:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40096a:	2000      	movs	r0, #0
  40096c:	4770      	bx	lr
		ul_id -= 32;
  40096e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400970:	4b0a      	ldr	r3, [pc, #40]	; (40099c <pmc_enable_periph_clk+0x50>)
  400972:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400976:	2301      	movs	r3, #1
  400978:	4083      	lsls	r3, r0
  40097a:	4393      	bics	r3, r2
  40097c:	d00b      	beq.n	400996 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40097e:	2301      	movs	r3, #1
  400980:	fa03 f000 	lsl.w	r0, r3, r0
  400984:	4b05      	ldr	r3, [pc, #20]	; (40099c <pmc_enable_periph_clk+0x50>)
  400986:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40098a:	2000      	movs	r0, #0
  40098c:	4770      	bx	lr
		return 1;
  40098e:	2001      	movs	r0, #1
  400990:	4770      	bx	lr
	return 0;
  400992:	2000      	movs	r0, #0
  400994:	4770      	bx	lr
  400996:	2000      	movs	r0, #0
}
  400998:	4770      	bx	lr
  40099a:	bf00      	nop
  40099c:	400e0400 	.word	0x400e0400

004009a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4009a0:	e7fe      	b.n	4009a0 <Dummy_Handler>
	...

004009a4 <Reset_Handler>:
{
  4009a4:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  4009a6:	4b21      	ldr	r3, [pc, #132]	; (400a2c <Reset_Handler+0x88>)
  4009a8:	4a21      	ldr	r2, [pc, #132]	; (400a30 <Reset_Handler+0x8c>)
  4009aa:	429a      	cmp	r2, r3
  4009ac:	d928      	bls.n	400a00 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  4009ae:	4b21      	ldr	r3, [pc, #132]	; (400a34 <Reset_Handler+0x90>)
  4009b0:	4a1e      	ldr	r2, [pc, #120]	; (400a2c <Reset_Handler+0x88>)
  4009b2:	429a      	cmp	r2, r3
  4009b4:	d20c      	bcs.n	4009d0 <Reset_Handler+0x2c>
  4009b6:	3b01      	subs	r3, #1
  4009b8:	1a9b      	subs	r3, r3, r2
  4009ba:	f023 0303 	bic.w	r3, r3, #3
  4009be:	3304      	adds	r3, #4
  4009c0:	4413      	add	r3, r2
  4009c2:	491b      	ldr	r1, [pc, #108]	; (400a30 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  4009c4:	f851 0b04 	ldr.w	r0, [r1], #4
  4009c8:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4009cc:	429a      	cmp	r2, r3
  4009ce:	d1f9      	bne.n	4009c4 <Reset_Handler+0x20>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4009d0:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  4009d2:	4b19      	ldr	r3, [pc, #100]	; (400a38 <Reset_Handler+0x94>)
  4009d4:	4a19      	ldr	r2, [pc, #100]	; (400a3c <Reset_Handler+0x98>)
  4009d6:	429a      	cmp	r2, r3
  4009d8:	d20a      	bcs.n	4009f0 <Reset_Handler+0x4c>
  4009da:	3b01      	subs	r3, #1
  4009dc:	1a9b      	subs	r3, r3, r2
  4009de:	f023 0303 	bic.w	r3, r3, #3
  4009e2:	3304      	adds	r3, #4
  4009e4:	4413      	add	r3, r2
		*pDest++ = 0;
  4009e6:	2100      	movs	r1, #0
  4009e8:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4009ec:	429a      	cmp	r2, r3
  4009ee:	d1fb      	bne.n	4009e8 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  4009f0:	4b13      	ldr	r3, [pc, #76]	; (400a40 <Reset_Handler+0x9c>)
  4009f2:	4a14      	ldr	r2, [pc, #80]	; (400a44 <Reset_Handler+0xa0>)
  4009f4:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  4009f6:	4b14      	ldr	r3, [pc, #80]	; (400a48 <Reset_Handler+0xa4>)
  4009f8:	4798      	blx	r3
	main();
  4009fa:	4b14      	ldr	r3, [pc, #80]	; (400a4c <Reset_Handler+0xa8>)
  4009fc:	4798      	blx	r3
  4009fe:	e7fe      	b.n	4009fe <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  400a00:	4b0a      	ldr	r3, [pc, #40]	; (400a2c <Reset_Handler+0x88>)
  400a02:	4a0b      	ldr	r2, [pc, #44]	; (400a30 <Reset_Handler+0x8c>)
  400a04:	429a      	cmp	r2, r3
  400a06:	d2e3      	bcs.n	4009d0 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400a08:	4b0a      	ldr	r3, [pc, #40]	; (400a34 <Reset_Handler+0x90>)
  400a0a:	4808      	ldr	r0, [pc, #32]	; (400a2c <Reset_Handler+0x88>)
  400a0c:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400a0e:	4611      	mov	r1, r2
  400a10:	3a04      	subs	r2, #4
  400a12:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  400a14:	2800      	cmp	r0, #0
  400a16:	d0db      	beq.n	4009d0 <Reset_Handler+0x2c>
  400a18:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  400a1c:	f852 0904 	ldr.w	r0, [r2], #-4
  400a20:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  400a24:	42ca      	cmn	r2, r1
  400a26:	d1f9      	bne.n	400a1c <Reset_Handler+0x78>
  400a28:	e7d2      	b.n	4009d0 <Reset_Handler+0x2c>
  400a2a:	bf00      	nop
  400a2c:	20000000 	.word	0x20000000
  400a30:	00400ec8 	.word	0x00400ec8
  400a34:	20000434 	.word	0x20000434
  400a38:	200004f0 	.word	0x200004f0
  400a3c:	20000434 	.word	0x20000434
  400a40:	e000ed00 	.word	0xe000ed00
  400a44:	00400000 	.word	0x00400000
  400a48:	00400d19 	.word	0x00400d19
  400a4c:	00400cfd 	.word	0x00400cfd

00400a50 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400a50:	4b3c      	ldr	r3, [pc, #240]	; (400b44 <SystemCoreClockUpdate+0xf4>)
  400a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a54:	f003 0303 	and.w	r3, r3, #3
  400a58:	2b03      	cmp	r3, #3
  400a5a:	d80e      	bhi.n	400a7a <SystemCoreClockUpdate+0x2a>
  400a5c:	e8df f003 	tbb	[pc, r3]
  400a60:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400a64:	4b38      	ldr	r3, [pc, #224]	; (400b48 <SystemCoreClockUpdate+0xf8>)
  400a66:	695b      	ldr	r3, [r3, #20]
  400a68:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400a6c:	bf14      	ite	ne
  400a6e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400a72:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400a76:	4b35      	ldr	r3, [pc, #212]	; (400b4c <SystemCoreClockUpdate+0xfc>)
  400a78:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400a7a:	4b32      	ldr	r3, [pc, #200]	; (400b44 <SystemCoreClockUpdate+0xf4>)
  400a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a82:	2b70      	cmp	r3, #112	; 0x70
  400a84:	d055      	beq.n	400b32 <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a86:	4b2f      	ldr	r3, [pc, #188]	; (400b44 <SystemCoreClockUpdate+0xf4>)
  400a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  400a8a:	4930      	ldr	r1, [pc, #192]	; (400b4c <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a8c:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  400a90:	680b      	ldr	r3, [r1, #0]
  400a92:	40d3      	lsrs	r3, r2
  400a94:	600b      	str	r3, [r1, #0]
  400a96:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400a98:	4b2a      	ldr	r3, [pc, #168]	; (400b44 <SystemCoreClockUpdate+0xf4>)
  400a9a:	6a1b      	ldr	r3, [r3, #32]
  400a9c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400aa0:	d003      	beq.n	400aaa <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400aa2:	4a2b      	ldr	r2, [pc, #172]	; (400b50 <SystemCoreClockUpdate+0x100>)
  400aa4:	4b29      	ldr	r3, [pc, #164]	; (400b4c <SystemCoreClockUpdate+0xfc>)
  400aa6:	601a      	str	r2, [r3, #0]
  400aa8:	e7e7      	b.n	400a7a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400aaa:	4a2a      	ldr	r2, [pc, #168]	; (400b54 <SystemCoreClockUpdate+0x104>)
  400aac:	4b27      	ldr	r3, [pc, #156]	; (400b4c <SystemCoreClockUpdate+0xfc>)
  400aae:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400ab0:	4b24      	ldr	r3, [pc, #144]	; (400b44 <SystemCoreClockUpdate+0xf4>)
  400ab2:	6a1b      	ldr	r3, [r3, #32]
  400ab4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ab8:	2b10      	cmp	r3, #16
  400aba:	d005      	beq.n	400ac8 <SystemCoreClockUpdate+0x78>
  400abc:	2b20      	cmp	r3, #32
  400abe:	d1dc      	bne.n	400a7a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400ac0:	4a23      	ldr	r2, [pc, #140]	; (400b50 <SystemCoreClockUpdate+0x100>)
  400ac2:	4b22      	ldr	r3, [pc, #136]	; (400b4c <SystemCoreClockUpdate+0xfc>)
  400ac4:	601a      	str	r2, [r3, #0]
			break;
  400ac6:	e7d8      	b.n	400a7a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400ac8:	4a23      	ldr	r2, [pc, #140]	; (400b58 <SystemCoreClockUpdate+0x108>)
  400aca:	4b20      	ldr	r3, [pc, #128]	; (400b4c <SystemCoreClockUpdate+0xfc>)
  400acc:	601a      	str	r2, [r3, #0]
			break;
  400ace:	e7d4      	b.n	400a7a <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400ad0:	4b1c      	ldr	r3, [pc, #112]	; (400b44 <SystemCoreClockUpdate+0xf4>)
  400ad2:	6a1b      	ldr	r3, [r3, #32]
  400ad4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ad8:	d018      	beq.n	400b0c <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400ada:	4a1d      	ldr	r2, [pc, #116]	; (400b50 <SystemCoreClockUpdate+0x100>)
  400adc:	4b1b      	ldr	r3, [pc, #108]	; (400b4c <SystemCoreClockUpdate+0xfc>)
  400ade:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400ae0:	4b18      	ldr	r3, [pc, #96]	; (400b44 <SystemCoreClockUpdate+0xf4>)
  400ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ae4:	f003 0303 	and.w	r3, r3, #3
  400ae8:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400aea:	4a16      	ldr	r2, [pc, #88]	; (400b44 <SystemCoreClockUpdate+0xf4>)
  400aec:	bf07      	ittee	eq
  400aee:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400af0:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400af2:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400af4:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400af6:	4815      	ldr	r0, [pc, #84]	; (400b4c <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400af8:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400afc:	6803      	ldr	r3, [r0, #0]
  400afe:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  400b02:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400b04:	fbb3 f3f2 	udiv	r3, r3, r2
  400b08:	6003      	str	r3, [r0, #0]
  400b0a:	e7b6      	b.n	400a7a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b0c:	4a11      	ldr	r2, [pc, #68]	; (400b54 <SystemCoreClockUpdate+0x104>)
  400b0e:	4b0f      	ldr	r3, [pc, #60]	; (400b4c <SystemCoreClockUpdate+0xfc>)
  400b10:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400b12:	4b0c      	ldr	r3, [pc, #48]	; (400b44 <SystemCoreClockUpdate+0xf4>)
  400b14:	6a1b      	ldr	r3, [r3, #32]
  400b16:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b1a:	2b10      	cmp	r3, #16
  400b1c:	d005      	beq.n	400b2a <SystemCoreClockUpdate+0xda>
  400b1e:	2b20      	cmp	r3, #32
  400b20:	d1de      	bne.n	400ae0 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400b22:	4a0b      	ldr	r2, [pc, #44]	; (400b50 <SystemCoreClockUpdate+0x100>)
  400b24:	4b09      	ldr	r3, [pc, #36]	; (400b4c <SystemCoreClockUpdate+0xfc>)
  400b26:	601a      	str	r2, [r3, #0]
					break;
  400b28:	e7da      	b.n	400ae0 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400b2a:	4a0b      	ldr	r2, [pc, #44]	; (400b58 <SystemCoreClockUpdate+0x108>)
  400b2c:	4b07      	ldr	r3, [pc, #28]	; (400b4c <SystemCoreClockUpdate+0xfc>)
  400b2e:	601a      	str	r2, [r3, #0]
					break;
  400b30:	e7d6      	b.n	400ae0 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400b32:	4a06      	ldr	r2, [pc, #24]	; (400b4c <SystemCoreClockUpdate+0xfc>)
  400b34:	6813      	ldr	r3, [r2, #0]
  400b36:	4909      	ldr	r1, [pc, #36]	; (400b5c <SystemCoreClockUpdate+0x10c>)
  400b38:	fba1 1303 	umull	r1, r3, r1, r3
  400b3c:	085b      	lsrs	r3, r3, #1
  400b3e:	6013      	str	r3, [r2, #0]
  400b40:	4770      	bx	lr
  400b42:	bf00      	nop
  400b44:	400e0400 	.word	0x400e0400
  400b48:	400e1410 	.word	0x400e1410
  400b4c:	20000000 	.word	0x20000000
  400b50:	00b71b00 	.word	0x00b71b00
  400b54:	003d0900 	.word	0x003d0900
  400b58:	007a1200 	.word	0x007a1200
  400b5c:	aaaaaaab 	.word	0xaaaaaaab

00400b60 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400b60:	4b1a      	ldr	r3, [pc, #104]	; (400bcc <system_init_flash+0x6c>)
  400b62:	4298      	cmp	r0, r3
  400b64:	d914      	bls.n	400b90 <system_init_flash+0x30>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400b66:	4b1a      	ldr	r3, [pc, #104]	; (400bd0 <system_init_flash+0x70>)
  400b68:	4298      	cmp	r0, r3
  400b6a:	d919      	bls.n	400ba0 <system_init_flash+0x40>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400b6c:	4b19      	ldr	r3, [pc, #100]	; (400bd4 <system_init_flash+0x74>)
  400b6e:	4298      	cmp	r0, r3
  400b70:	d91d      	bls.n	400bae <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400b72:	4b19      	ldr	r3, [pc, #100]	; (400bd8 <system_init_flash+0x78>)
  400b74:	4298      	cmp	r0, r3
  400b76:	d921      	bls.n	400bbc <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400b78:	4b18      	ldr	r3, [pc, #96]	; (400bdc <system_init_flash+0x7c>)
  400b7a:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400b7c:	bf94      	ite	ls
  400b7e:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b82:	4b17      	ldrhi	r3, [pc, #92]	; (400be0 <system_init_flash+0x80>)
  400b84:	4a17      	ldr	r2, [pc, #92]	; (400be4 <system_init_flash+0x84>)
  400b86:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b88:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400b8c:	6013      	str	r3, [r2, #0]
  400b8e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400b90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400b94:	4a13      	ldr	r2, [pc, #76]	; (400be4 <system_init_flash+0x84>)
  400b96:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400b98:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400b9c:	6013      	str	r3, [r2, #0]
  400b9e:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ba0:	4b11      	ldr	r3, [pc, #68]	; (400be8 <system_init_flash+0x88>)
  400ba2:	4a10      	ldr	r2, [pc, #64]	; (400be4 <system_init_flash+0x84>)
  400ba4:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ba6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400baa:	6013      	str	r3, [r2, #0]
  400bac:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400bae:	4b0f      	ldr	r3, [pc, #60]	; (400bec <system_init_flash+0x8c>)
  400bb0:	4a0c      	ldr	r2, [pc, #48]	; (400be4 <system_init_flash+0x84>)
  400bb2:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400bb4:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400bb8:	6013      	str	r3, [r2, #0]
  400bba:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400bbc:	4b0c      	ldr	r3, [pc, #48]	; (400bf0 <system_init_flash+0x90>)
  400bbe:	4a09      	ldr	r2, [pc, #36]	; (400be4 <system_init_flash+0x84>)
  400bc0:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400bc2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400bc6:	6013      	str	r3, [r2, #0]
  400bc8:	4770      	bx	lr
  400bca:	bf00      	nop
  400bcc:	01312cff 	.word	0x01312cff
  400bd0:	026259ff 	.word	0x026259ff
  400bd4:	039386ff 	.word	0x039386ff
  400bd8:	04c4b3ff 	.word	0x04c4b3ff
  400bdc:	05f5e0ff 	.word	0x05f5e0ff
  400be0:	04000500 	.word	0x04000500
  400be4:	400e0a00 	.word	0x400e0a00
  400be8:	04000100 	.word	0x04000100
  400bec:	04000200 	.word	0x04000200
  400bf0:	04000300 	.word	0x04000300

00400bf4 <presence_interrupt>:
	NVIC_SetPriority (PIOB_IRQn,14);
	NVIC_EnableIRQ(PIOB_IRQn);
}

void presence_interrupt()
{
  400bf4:	b530      	push	{r4, r5, lr}
  400bf6:	b085      	sub	sp, #20
//	LED_Toggle(LED0_GPIO);	
	LED_On(LED0_GPIO);
  400bf8:	2013      	movs	r0, #19
  400bfa:	4b19      	ldr	r3, [pc, #100]	; (400c60 <presence_interrupt+0x6c>)
  400bfc:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC);
  400bfe:	2017      	movs	r0, #23
  400c00:	4b18      	ldr	r3, [pc, #96]	; (400c64 <presence_interrupt+0x70>)
  400c02:	4798      	blx	r3
	tc_find_mck_divisor( freq_desejada, ul_sysclk, &ul_div, &ul_tcclks,	BOARD_MCK);
  400c04:	4c18      	ldr	r4, [pc, #96]	; (400c68 <presence_interrupt+0x74>)
  400c06:	9400      	str	r4, [sp, #0]
  400c08:	ab03      	add	r3, sp, #12
  400c0a:	aa02      	add	r2, sp, #8
  400c0c:	4621      	mov	r1, r4
  400c0e:	2000      	movs	r0, #0
  400c10:	4d16      	ldr	r5, [pc, #88]	; (400c6c <presence_interrupt+0x78>)
  400c12:	47a8      	blx	r5
	tc_init(TC, CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  400c14:	4d16      	ldr	r5, [pc, #88]	; (400c70 <presence_interrupt+0x7c>)
  400c16:	9a03      	ldr	r2, [sp, #12]
  400c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  400c1c:	2100      	movs	r1, #0
  400c1e:	4628      	mov	r0, r5
  400c20:	4b14      	ldr	r3, [pc, #80]	; (400c74 <presence_interrupt+0x80>)
  400c22:	4798      	blx	r3
	counts = (ul_sysclk/ul_div)/freq_desejada;
  400c24:	9a02      	ldr	r2, [sp, #8]
  400c26:	fbb4 f2f2 	udiv	r2, r4, r2
  400c2a:	2400      	movs	r4, #0
	tc_write_rc(TC, CHANNEL, counts);
  400c2c:	fbb2 f2f4 	udiv	r2, r2, r4
  400c30:	4621      	mov	r1, r4
  400c32:	4628      	mov	r0, r5
  400c34:	4b10      	ldr	r3, [pc, #64]	; (400c78 <presence_interrupt+0x84>)
  400c36:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400c38:	4b10      	ldr	r3, [pc, #64]	; (400c7c <presence_interrupt+0x88>)
  400c3a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400c3e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400c42:	21f0      	movs	r1, #240	; 0xf0
  400c44:	f883 1317 	strb.w	r1, [r3, #791]	; 0x317
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400c48:	601a      	str	r2, [r3, #0]
	tc_enable_interrupt(TC,	CHANNEL, TC_IER_CPCS);
  400c4a:	2210      	movs	r2, #16
  400c4c:	4621      	mov	r1, r4
  400c4e:	4628      	mov	r0, r5
  400c50:	4b0b      	ldr	r3, [pc, #44]	; (400c80 <presence_interrupt+0x8c>)
  400c52:	4798      	blx	r3
	tc_start(TC, CHANNEL);
  400c54:	4621      	mov	r1, r4
  400c56:	4628      	mov	r0, r5
  400c58:	4b0a      	ldr	r3, [pc, #40]	; (400c84 <presence_interrupt+0x90>)
  400c5a:	4798      	blx	r3
	tc_config(0.1);
  400c5c:	b005      	add	sp, #20
  400c5e:	bd30      	pop	{r4, r5, pc}
  400c60:	004003c5 	.word	0x004003c5
  400c64:	0040094d 	.word	0x0040094d
  400c68:	07270e00 	.word	0x07270e00
  400c6c:	00400171 	.word	0x00400171
  400c70:	40010000 	.word	0x40010000
  400c74:	00400139 	.word	0x00400139
  400c78:	00400159 	.word	0x00400159
  400c7c:	e000e100 	.word	0xe000e100
  400c80:	00400161 	.word	0x00400161
  400c84:	00400151 	.word	0x00400151

00400c88 <TC0_Handler>:
{
  400c88:	b508      	push	{r3, lr}
	tc_get_status(TC,CHANNEL);
  400c8a:	2100      	movs	r1, #0
  400c8c:	4803      	ldr	r0, [pc, #12]	; (400c9c <TC0_Handler+0x14>)
  400c8e:	4b04      	ldr	r3, [pc, #16]	; (400ca0 <TC0_Handler+0x18>)
  400c90:	4798      	blx	r3
	LED_Off(LED0_GPIO);
  400c92:	2013      	movs	r0, #19
  400c94:	4b03      	ldr	r3, [pc, #12]	; (400ca4 <TC0_Handler+0x1c>)
  400c96:	4798      	blx	r3
  400c98:	bd08      	pop	{r3, pc}
  400c9a:	bf00      	nop
  400c9c:	40010000 	.word	0x40010000
  400ca0:	00400169 	.word	0x00400169
  400ca4:	00400389 	.word	0x00400389

00400ca8 <presence_cfg>:
{
  400ca8:	b530      	push	{r4, r5, lr}
  400caa:	b083      	sub	sp, #12
	pio_set_input(PIOB, PIO_PB3, PIO_PULLUP | PIO_DEBOUNCE);
  400cac:	4c0d      	ldr	r4, [pc, #52]	; (400ce4 <presence_cfg+0x3c>)
  400cae:	2209      	movs	r2, #9
  400cb0:	2108      	movs	r1, #8
  400cb2:	4620      	mov	r0, r4
  400cb4:	4b0c      	ldr	r3, [pc, #48]	; (400ce8 <presence_cfg+0x40>)
  400cb6:	4798      	blx	r3
	pio_handler_set(PIOB, ID_PIOB, PIO_PB3, PIO_IT_RISE_EDGE, presence_interrupt);
  400cb8:	4b0c      	ldr	r3, [pc, #48]	; (400cec <presence_cfg+0x44>)
  400cba:	9300      	str	r3, [sp, #0]
  400cbc:	2370      	movs	r3, #112	; 0x70
  400cbe:	2208      	movs	r2, #8
  400cc0:	210c      	movs	r1, #12
  400cc2:	4620      	mov	r0, r4
  400cc4:	4d0a      	ldr	r5, [pc, #40]	; (400cf0 <presence_cfg+0x48>)
  400cc6:	47a8      	blx	r5
	pio_enable_interrupt(PIOB, PIO_PB3);
  400cc8:	2108      	movs	r1, #8
  400cca:	4620      	mov	r0, r4
  400ccc:	4b09      	ldr	r3, [pc, #36]	; (400cf4 <presence_cfg+0x4c>)
  400cce:	4798      	blx	r3
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400cd0:	4b09      	ldr	r3, [pc, #36]	; (400cf8 <presence_cfg+0x50>)
  400cd2:	22e0      	movs	r2, #224	; 0xe0
  400cd4:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400cd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400cdc:	601a      	str	r2, [r3, #0]
}
  400cde:	b003      	add	sp, #12
  400ce0:	bd30      	pop	{r4, r5, pc}
  400ce2:	bf00      	nop
  400ce4:	400e1000 	.word	0x400e1000
  400ce8:	00400491 	.word	0x00400491
  400cec:	00400bf5 	.word	0x00400bf5
  400cf0:	004007b9 	.word	0x004007b9
  400cf4:	00400517 	.word	0x00400517
  400cf8:	e000e100 	.word	0xe000e100

00400cfc <main>:
{
  400cfc:	b508      	push	{r3, lr}
	sysclk_init();
  400cfe:	4b03      	ldr	r3, [pc, #12]	; (400d0c <main+0x10>)
  400d00:	4798      	blx	r3
	board_init();
  400d02:	4b03      	ldr	r3, [pc, #12]	; (400d10 <main+0x14>)
  400d04:	4798      	blx	r3
	presence_cfg();
  400d06:	4b03      	ldr	r3, [pc, #12]	; (400d14 <main+0x18>)
  400d08:	4798      	blx	r3
  400d0a:	e7fe      	b.n	400d0a <main+0xe>
  400d0c:	004001e1 	.word	0x004001e1
  400d10:	00400245 	.word	0x00400245
  400d14:	00400ca9 	.word	0x00400ca9

00400d18 <__libc_init_array>:
  400d18:	b570      	push	{r4, r5, r6, lr}
  400d1a:	4e0f      	ldr	r6, [pc, #60]	; (400d58 <__libc_init_array+0x40>)
  400d1c:	4d0f      	ldr	r5, [pc, #60]	; (400d5c <__libc_init_array+0x44>)
  400d1e:	1b76      	subs	r6, r6, r5
  400d20:	10b6      	asrs	r6, r6, #2
  400d22:	bf18      	it	ne
  400d24:	2400      	movne	r4, #0
  400d26:	d005      	beq.n	400d34 <__libc_init_array+0x1c>
  400d28:	3401      	adds	r4, #1
  400d2a:	f855 3b04 	ldr.w	r3, [r5], #4
  400d2e:	4798      	blx	r3
  400d30:	42a6      	cmp	r6, r4
  400d32:	d1f9      	bne.n	400d28 <__libc_init_array+0x10>
  400d34:	4e0a      	ldr	r6, [pc, #40]	; (400d60 <__libc_init_array+0x48>)
  400d36:	4d0b      	ldr	r5, [pc, #44]	; (400d64 <__libc_init_array+0x4c>)
  400d38:	1b76      	subs	r6, r6, r5
  400d3a:	f000 f8b3 	bl	400ea4 <_init>
  400d3e:	10b6      	asrs	r6, r6, #2
  400d40:	bf18      	it	ne
  400d42:	2400      	movne	r4, #0
  400d44:	d006      	beq.n	400d54 <__libc_init_array+0x3c>
  400d46:	3401      	adds	r4, #1
  400d48:	f855 3b04 	ldr.w	r3, [r5], #4
  400d4c:	4798      	blx	r3
  400d4e:	42a6      	cmp	r6, r4
  400d50:	d1f9      	bne.n	400d46 <__libc_init_array+0x2e>
  400d52:	bd70      	pop	{r4, r5, r6, pc}
  400d54:	bd70      	pop	{r4, r5, r6, pc}
  400d56:	bf00      	nop
  400d58:	00400eb0 	.word	0x00400eb0
  400d5c:	00400eb0 	.word	0x00400eb0
  400d60:	00400eb8 	.word	0x00400eb8
  400d64:	00400eb0 	.word	0x00400eb0

00400d68 <register_fini>:
  400d68:	4b02      	ldr	r3, [pc, #8]	; (400d74 <register_fini+0xc>)
  400d6a:	b113      	cbz	r3, 400d72 <register_fini+0xa>
  400d6c:	4802      	ldr	r0, [pc, #8]	; (400d78 <register_fini+0x10>)
  400d6e:	f000 b805 	b.w	400d7c <atexit>
  400d72:	4770      	bx	lr
  400d74:	00000000 	.word	0x00000000
  400d78:	00400d89 	.word	0x00400d89

00400d7c <atexit>:
  400d7c:	2300      	movs	r3, #0
  400d7e:	4601      	mov	r1, r0
  400d80:	461a      	mov	r2, r3
  400d82:	4618      	mov	r0, r3
  400d84:	f000 b81e 	b.w	400dc4 <__register_exitproc>

00400d88 <__libc_fini_array>:
  400d88:	b538      	push	{r3, r4, r5, lr}
  400d8a:	4c0a      	ldr	r4, [pc, #40]	; (400db4 <__libc_fini_array+0x2c>)
  400d8c:	4d0a      	ldr	r5, [pc, #40]	; (400db8 <__libc_fini_array+0x30>)
  400d8e:	1b64      	subs	r4, r4, r5
  400d90:	10a4      	asrs	r4, r4, #2
  400d92:	d00a      	beq.n	400daa <__libc_fini_array+0x22>
  400d94:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400d98:	3b01      	subs	r3, #1
  400d9a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400d9e:	3c01      	subs	r4, #1
  400da0:	f855 3904 	ldr.w	r3, [r5], #-4
  400da4:	4798      	blx	r3
  400da6:	2c00      	cmp	r4, #0
  400da8:	d1f9      	bne.n	400d9e <__libc_fini_array+0x16>
  400daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400dae:	f000 b883 	b.w	400eb8 <_fini>
  400db2:	bf00      	nop
  400db4:	00400ec8 	.word	0x00400ec8
  400db8:	00400ec4 	.word	0x00400ec4

00400dbc <__retarget_lock_acquire_recursive>:
  400dbc:	4770      	bx	lr
  400dbe:	bf00      	nop

00400dc0 <__retarget_lock_release_recursive>:
  400dc0:	4770      	bx	lr
  400dc2:	bf00      	nop

00400dc4 <__register_exitproc>:
  400dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400dc8:	4d2c      	ldr	r5, [pc, #176]	; (400e7c <__register_exitproc+0xb8>)
  400dca:	4606      	mov	r6, r0
  400dcc:	6828      	ldr	r0, [r5, #0]
  400dce:	4698      	mov	r8, r3
  400dd0:	460f      	mov	r7, r1
  400dd2:	4691      	mov	r9, r2
  400dd4:	f7ff fff2 	bl	400dbc <__retarget_lock_acquire_recursive>
  400dd8:	4b29      	ldr	r3, [pc, #164]	; (400e80 <__register_exitproc+0xbc>)
  400dda:	681c      	ldr	r4, [r3, #0]
  400ddc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400de0:	2b00      	cmp	r3, #0
  400de2:	d03e      	beq.n	400e62 <__register_exitproc+0x9e>
  400de4:	685a      	ldr	r2, [r3, #4]
  400de6:	2a1f      	cmp	r2, #31
  400de8:	dc1c      	bgt.n	400e24 <__register_exitproc+0x60>
  400dea:	f102 0e01 	add.w	lr, r2, #1
  400dee:	b176      	cbz	r6, 400e0e <__register_exitproc+0x4a>
  400df0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  400df4:	2401      	movs	r4, #1
  400df6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400dfa:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400dfe:	4094      	lsls	r4, r2
  400e00:	4320      	orrs	r0, r4
  400e02:	2e02      	cmp	r6, #2
  400e04:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400e08:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400e0c:	d023      	beq.n	400e56 <__register_exitproc+0x92>
  400e0e:	3202      	adds	r2, #2
  400e10:	f8c3 e004 	str.w	lr, [r3, #4]
  400e14:	6828      	ldr	r0, [r5, #0]
  400e16:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400e1a:	f7ff ffd1 	bl	400dc0 <__retarget_lock_release_recursive>
  400e1e:	2000      	movs	r0, #0
  400e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400e24:	4b17      	ldr	r3, [pc, #92]	; (400e84 <__register_exitproc+0xc0>)
  400e26:	b30b      	cbz	r3, 400e6c <__register_exitproc+0xa8>
  400e28:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400e2c:	f3af 8000 	nop.w
  400e30:	4603      	mov	r3, r0
  400e32:	b1d8      	cbz	r0, 400e6c <__register_exitproc+0xa8>
  400e34:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400e38:	6002      	str	r2, [r0, #0]
  400e3a:	2100      	movs	r1, #0
  400e3c:	6041      	str	r1, [r0, #4]
  400e3e:	460a      	mov	r2, r1
  400e40:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  400e44:	f04f 0e01 	mov.w	lr, #1
  400e48:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400e4c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400e50:	2e00      	cmp	r6, #0
  400e52:	d0dc      	beq.n	400e0e <__register_exitproc+0x4a>
  400e54:	e7cc      	b.n	400df0 <__register_exitproc+0x2c>
  400e56:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400e5a:	430c      	orrs	r4, r1
  400e5c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400e60:	e7d5      	b.n	400e0e <__register_exitproc+0x4a>
  400e62:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400e66:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400e6a:	e7bb      	b.n	400de4 <__register_exitproc+0x20>
  400e6c:	6828      	ldr	r0, [r5, #0]
  400e6e:	f7ff ffa7 	bl	400dc0 <__retarget_lock_release_recursive>
  400e72:	f04f 30ff 	mov.w	r0, #4294967295
  400e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400e7a:	bf00      	nop
  400e7c:	20000430 	.word	0x20000430
  400e80:	00400ea0 	.word	0x00400ea0
  400e84:	00000000 	.word	0x00000000

00400e88 <LED_DESCRIPTOR>:
  400e88:	00000013 00000000 00000014 00000000     ................
  400e98:	00000054 00000001                       T.......

00400ea0 <_global_impure_ptr>:
  400ea0:	20000008                                ... 

00400ea4 <_init>:
  400ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ea6:	bf00      	nop
  400ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400eaa:	bc08      	pop	{r3}
  400eac:	469e      	mov	lr, r3
  400eae:	4770      	bx	lr

00400eb0 <__init_array_start>:
  400eb0:	00400d69 	.word	0x00400d69

00400eb4 <__frame_dummy_init_array_entry>:
  400eb4:	004000f1                                ..@.

00400eb8 <_fini>:
  400eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400eba:	bf00      	nop
  400ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400ebe:	bc08      	pop	{r3}
  400ec0:	469e      	mov	lr, r3
  400ec2:	4770      	bx	lr

00400ec4 <__fini_array_start>:
  400ec4:	004000cd 	.word	0x004000cd
